<%
package main

type Template struct {
	PackageName  string
	Generator *Generator
}

func (tmpl *Template) Render(ctx context.Context, w io.Writer) { %>
// Code generated by "govader"; DO NOT EDIT.
package <%= tmpl.PackageName %>

import (
	"errors"
	"regexp"
	"strings"

	"github.com/spf13/cast"
)

// presence	        required	            A rule without additional values
// value_constraint	max:1000	            A rule with a single key-value pair
// conditional	    required_if:Name=John	A rule that depends on another field
// range	between:1,1000	A rule that specifies a range of values
type (
	_Gov_PresenceValidator[T any]			func(field string, value T) error
	_Gov_ValueConstraintValidator[T any]	func(field string, value T, cond T) error
	_Gov_RangeValidator[T any]           	func(field string, value T, min T, max T) error
	_Gov_ConditionalValidator     			func(field1 string, value1 any, field2 string, value2 any, cond any) error
)

type _Gov_Rule interface {
	Validate() error
}

// presence	        required	            A rule without additional values
type _Gov_RulePresence [T any]struct {
	Field     string
	Value     T
	Validator _Gov_PresenceValidator[T]
}

func (r _Gov_RulePresence[T]) Validate() error {
	return r.Validator(r.Field, r.Value)
}

// value_constraint	max:1000	            A rule with a single key-value pair
type _Gov_RuleValueConstraint [T any]struct {
	Name      string
	Field     string
	Value     T
	Cond      T
	Validator _Gov_ValueConstraintValidator[T]
}

func (r _Gov_RuleValueConstraint[T]) Validate() error {
	return r.Validator(r.Field, r.Value, r.Cond)
}

// range	between:1,1000	A rule that specifies a range of values
type _Gov_RuleRange[T any] struct {
	Name      string
	Field     string
	Value     T
	Min       T
	Max       T
	Validator _Gov_RangeValidator[T]
}

func (r _Gov_RuleRange[T]) Validate() error {
	return r.Validator(r.Field, r.Value, r.Min, r.Max)
}

// conditional	    required_if:Name=John	A rule that depends on another field
type _Gov_RuleConditional struct {
	Name      string
	Field1    string
	Field2    string
	Value1    any
	Value2    any
	Cond      any
	Validator _Gov_ConditionalValidator
}

func (r _Gov_RuleConditional) Validate() error {
	return r.Validator(r.Field1, r.Value1, r.Field2, r.Value2, r.Cond)
}

<% tmpl.Generator.Generate() %>

<% } %>
